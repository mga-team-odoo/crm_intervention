-
    Create a contract
-
  !record {model: account.analytic.account, id: contract_one}:
      name: Contrat partner 2
      partner_id: base.res_partner_2
      use_timesheets: True
      use_inter: True
      type: contract
      code: TESTXXXXX1
      date_start: !eval "time.strftime('%Y-%m-01')"
      pricelist_id: product.list0
      to_invoice: hr_timesheet_invoice.timesheet_invoice_factor1

-
    Create an intervention with site
-
  !record {model: crm.intervention, id: crm_inter_ctr1}:
      name: Intervention Test 1
      partner_id: base.res_partner_2
      customer_information: Test\ntest
      site_id: intervention_site_test1
      equipment_id: inter_equip_test1
      contract_id: contract_one

-
    Check if onchange works
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      log('Partner invoice id: %i must be %i' % (inter.partner_invoice_id.id, ref('base.res_partner_2')))
      assert inter.partner_invoice_id.id == ref('base.res_partner_2'), "The onchange function of partner was not correctly triggered"
      assert inter.user_id.id == ref('base.user_demo'), "Must be a demo user afefct on the site"

-
    Confirm the intervention, check proposed date, must be raise
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      log('Date start is %s' % inter.date_planned_start)
      try:
          inter.case_open()
          asset(False)
      except:
          pass
-
    Add start date and confirm
-
  !record {model: crm.intervention, id: crm_inter_ctr1}:
      name: Intervention Test 1
      date_planned_start: !eval "time.strftime('%Y-%m-01 13:00:00')"
      date_planned_end: !eval "time.strftime('%Y-%m-01 17:00:00')"
-
    Confirm the intervention, check the duration
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      inter.case_open()
-
    Check the duration
-
  !assert {model: crm.intervention, id: crm_inter_ctr1, string: Total duration must be 4 hours}:
      - duration_planned == 4.0

-
    After intervention fill the intervention report
-
  !record {model: crm.intervention, id: crm_inter_ctr1}:
      name: Intervention Test 1
      date_effective_start: !eval "time.strftime('%Y-%m-01 13:00:00')"
      duration_effective: 5.0
      pause_effective: 1.0
      description: This intervention is made correctly
-
    Check if end date is compute correctly
-
  !python {model: crm.intervention}: |
      import time
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      log('Date end is %s' % inter.date_effective_end)
      assert inter.date_effective_end == time.strftime('%Y-%m-01 19:00:00'), 'End effective hour must be 19:00'
-
     intervention to invoice, click on the button 
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      inter.case_pending()
-
    Add product to invoice this intervention
-
  !record {model: crm.intervention, id: crm_inter_ctr1}:
      name: Intervention Test 1
      product_id: product.product_product_2
      duration_effective: 5.0
      pause_effective: 1.0
      alldays_effective: False
      contract_id: False
-
    Check if the invoice quantity
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      log('Quantity is %s' % inter.invoice_qty)
      log('Unit is %s' % inter.invoice_uom_id)
      assert inter.invoice_qty == 5.0, 'Quantity must be 5.0'
-
    Add product USB adapter to invoice
-
  !record {model: intervention.line, id: inter_ctr_line1}:
      inter_id: crm_inter_ctr1
      product_id: product.product_product_48
      name: 'My product 1'
      product_qty: 2.0
      product_uom_id: product.product_uom_unit
      to_invoice: True
      src_location_id: stock.stock_location_components
-
    Add graphic card to invoice
-
  !record {model: intervention.line, id: inter_ctr_line2}:
      inter_id: crm_inter_ctr1
      product_id: product.product_product_24
      name: 'My product 2'
      product_qty: 1.0
      product_uom_id: product.product_uom_unit
      to_invoice: True
-
    Add memory to invoice
-
  !record {model: intervention.line, id: inter_ctr_line3}:
      inter_id: crm_inter_ctr1
      product_id: product.product_product_46
      name: 'My RAM'
      product_qty: 1.0
      product_uom_id: product.product_uom_unit
      to_invoice: False
-
    Made an output move for each products lines, mustraised
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      try:
          inter.create_output_move()
          assert 0 == 1, 'Raise must be appear, missing location stock'
      except:
          pass
-
    Made an output move for each products lines, move ok
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      inter.write({'src_location_id': ref('stock.stock_location_stock')})
      inter.create_output_move()
-
    Generate invoice 
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      assert inter.invoice_id.id == False, 'This intervention must not invoiced yet!'
      assert inter.contract_id.id == False, 'No contract in this test'
      log('Number of histories: %s' % len(inter.equipment_id.history_ids))
      assert len(inter.equipment_id.history_ids) == 4, 'There are four histories before invoicing'
      inter.prepare_invoice()
-
    Check invoice generate
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      assert inter.state == 'done', 'Intervention must be done!'
      assert inter.invoice_id.id > 0, 'This intervention must be invoiced!!'
      assert len(inter.invoice_id.invoice_line) == 4, 'Must have 4 lines'
-
    Check on equipment if last intervention date is fill
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_inter_ctr1'))
      assert inter.date_effective_start[:10] == inter.equipment_id.last_int_date, 'Last intervention date must be updated'
      log('Number of histories: %s' % len(inter.equipment_id.history_ids))
      assert len(inter.equipment_id.history_ids) == 5, 'There are five histories now'
-
    Check if output move made to shelf 1
-
  !python {model: intervention.line}: |
      line = self.browse(cr, uid, ref('inter_ctr_line1'))
      assert line.move_id.location_id.id == ref('stock.stock_location_components'), 'Location dest must be shelf 1'




