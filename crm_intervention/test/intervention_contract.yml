-
    Create an intervention
-
  !record {model: crm.intervention, id: crm_intervention_test11}:
      name: Intervention Test 1
      partner_id: base.res_partner_2
      customer_information: Test\ntest
      user_id: base.user_root
-
    Check if onchange works
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      assert inter.partner_invoice_id.id == ref('base.res_partner_2'), "The onchange function of partner was not correctly triggered"

-
    Confirm the intervention, check proposed date, must be raise
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      log('Date start is %s' % inter.date_planned_start)
      try:
          inter.case_open()
          asset(False)
      except:
          pass
-
    Add start date and confirm
-
  !record {model: crm.intervention, id: crm_intervention_test11}:
      name: Intervention Test 1
      date_planned_start: !eval "time.strftime('%Y-%m-01 13:00:00')"
      date_planned_end: !eval "time.strftime('%Y-%m-01 17:00:00')"
-
    Confirm the intervention, check the duration
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      inter.case_open()
-
    Check the duration
-
  !assert {model: crm.intervention, id: crm_intervention_test11, string: Total duration must be 4 hours}:
      - duration_planned == 4.0
-
    After intervention fill the intervention report
-
  !record {model: crm.intervention, id: crm_intervention_test11}:
      name: Intervention Test 1
      date_effective_start: !eval "time.strftime('%Y-%m-01 13:00:00')"
      duration_effective: 5.0
      pause_effective: 1.0
      description: This intervention is made correctly
-
    Check if end date is compute correctly
-
  !python {model: crm.intervention}: |
      import time
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      log('Date end is %s' % inter.date_effective_end)
      assert inter.date_effective_end == time.strftime('%Y-%m-01 19:00:00'), 'End effective hour must be 19:00'
-
     intervention to invoice, click on the button 
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      inter.case_pending()
      assert inter.state == 'pending', 'Intervention must be in pending!'
-
    Add product to invoice this intervention
-
  !record {model: crm.intervention, id: crm_intervention_test11}:
      name: Intervention Test 1
      product_id: product.product_product_2
      duration_effective: 5.0
      pause_effective: 1.0
      alldays_effective: False
-
    Add expense account on product
-
  !python {model: product.product}: |
      prod = self.browse(cr, uid, ref('product.product_product_2'))
      prod.write({'property_account_expense': ref('account.a_expense')})
-
    Check if the invoice quantity
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      assert inter.invoice_qty == 5.0, 'Quantity must be 5.0'
      assert inter.invoice_uom_id.id == inter.product_id.uom_id.id, 'Unit is not the same on product and intervention'
      assert inter.contract_id.id >  0, 'This partner must have a contract'
-
    Generate invoice 
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      assert inter.invoice_id.id == False, 'This intervention must not invoiced yet!'
      assert inter.analytic_line_id.id == False, 'No analytic line yet !!'
      inter.prepare_invoice()
-
    Check invoice generate
-
  !python {model: crm.intervention}: |
      inter = self.browse(cr, uid, ref('crm_intervention_test11'))
      assert inter.state == 'done', 'Intervention must be done!'
      assert inter.analytic_line_id.id > 0, 'This intervention must be invoiced!!'
